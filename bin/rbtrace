#!/usr/bin/env ruby
require 'rubygems'
require 'ffi'

module RBTracer
  def self.process_line(line)
    @tracers ||= {}
    @nesting ||= 0
    @last_tracer ||= nil

    time, event, id, *args = line.strip.split(',')
    time = time.to_i
    id = id.to_i
    tracer = @tracers[id] if id > -1

    case event
    when 'add'
      if id == -1
        puts line
      else
        name = args.first
        @tracers[id] = {
          :name => name,
          :times => [],
          :names => [],
          :exprs => {},
          :last => false,
          :arglist => false
        }
      end

    when 'remove'
      if id == -1
        puts line
      else
        @tracers.delete(id)
      end

    when 'newexpr'
      expr_id, expr = *args
      expr_id = expr_id.to_i

      if expr_id > -1 and tracer
        tracer[:exprs][expr_id] = expr
      end

    when 'exprval'
      expr_id, val = *args
      expr_id = expr_id.to_i
      expr = tracer[:exprs][expr_id]

      if tracer[:arglist]
        print ', '
      else
        print '('
      end

      print "#{expr}="
      print val
      tracer[:arglist] = true

    when 'call','ccall'
      method, is_singleton, klass = *args
      is_singleton = (is_singleton == '1')
      name = klass ? "#{klass}#{ is_singleton ? '.' : '#' }" : ''
      name += method

      tracer[:times] << time
      tracer[:names] << name

      if @last_tracer and @last_tracer[:arglist]
        print ')'
        @last_tracer[:arglist] = false
      end
      puts
      print ' '*@nesting if @nesting > 0
      print name

      @nesting += 1
      @last_tracer = tracer
      tracer[:last] = name

    when 'return','creturn'
      @nesting -= 1 if @nesting > 0

      if start = tracer[:times].pop
        name = tracer[:names].pop
        diff = time - start
        @last_tracer[:arglist] = false if @last_tracer and @last_tracer[:last] != name

        print ')' if @last_tracer and @last_tracer[:arglist]

        unless tracer == @last_tracer and @last_tracer[:last] == name
          puts
          print ' '*@nesting if @nesting > 0
          print name
        end
        print ' <%f>' % (diff/1_000_000.0)
        puts if @nesting == 0 and (tracer != @last_tracer || @last_tracer[:last] != name)
      end

      tracer[:arglist] = false

    when 'slow', 'cslow'
      diff, nesting, method, is_singleton, klass = *args
      nesting = nesting.to_i
      diff = diff.to_i

      is_singleton = (is_singleton == '1')
      name = klass ? "#{klass}#{ is_singleton ? '.' : '#' }" : ''
      name += method

      print ' '*nesting if nesting > 0
      print name
      print ' '
      puts "<%f>" % (diff/1_000_000.0)
      puts if nesting == 0

    else
      puts "unknown event: #{line}"

    end
  rescue => e
    puts "error on: #{line}"
    raise e
  end
end

class EventMsg < FFI::Struct
  BUF_SIZE = RUBY_PLATFORM =~ /linux/ ? 256 : 120
  IPC_NOWAIT = 004000

  layout :mtype, :long,
         :buf, [:char, BUF_SIZE]

  def self.send_cmd(q, str)
    msg = EventMsg.new
    msg[:mtype] = 1
    msg[:buf].to_ptr.put_string(0, str)

    ret = MsgQ.msgsnd(q, msg, BUF_SIZE, 0)
    FFI::LastError.raise if ret == -1
  end

  def self.recv_cmd(q, block=true)
    msg = EventMsg.new
    ret = MsgQ.msgrcv(q, msg, BUF_SIZE, 0, block ? 0 : IPC_NOWAIT)
    if ret == -1
      if !block and [Errno::EAGAIN, Errno::ENOMSG].include?(FFI::LastError.exception)
        return nil
      end

      FFI::LastError.raise
    end

    msg[:buf].to_ptr.read_string
  end
end

module FFI::LastError
  def self.exception
    Errno::constants.map(&Errno.method(:const_get)).find{ |c| c.const_get(:Errno) == error }
  end
  def self.raise(msg=nil)
    Kernel.raise exception, msg
  end
end

module MsgQ
  extend FFI::Library

  ffi_lib 'c'
  attach_function :msgget, [:int, :int], :int
  attach_function :msgrcv, [:int, EventMsg.ptr, :size_t, :long, :int], :int
  attach_function :msgsnd, [:int, EventMsg.ptr, :size_t, :int], :int
end

if (pids = `ps ax -o pid`.split("\n").map{ |p| p.strip.to_i }).any?
  ipcs = `ipcs -q`.split("\n").grep(/^q/).map{ |line| line.strip.split[2] }
  ipcs.each do |ipci|
    next if ipci.match(/^0xf/)

    qi = ipci.to_i(16)
    qo = 0xffffffff - qi + 1
    ipco = "0x#{qo.to_s(16)}"

    if ipcs.include?(ipco) and !pids.include?(qi)
      STDERR.puts "** removing stale message queue pair: #{ipci}/#{ipco}"
      system("ipcrm -Q #{ipci} -Q #{ipco}")
    end
  end
end

if File.exists?(msgmnb = "/proc/sys/kernel/msgmnb")
  max = File.read(msgmnb).to_i
  if max < 512*1024
    STDERR.puts "** run `sudo sysctl kernel.msgmnb=#{512*1024}` to prevent losing events"
  end
end

raise 'invalid pid' unless ARGV[0]

begin
  raise ArgumentError unless pid = ARGV[0]
  pid = pid.to_i
  raise ArgumentError unless pid > 0
  Process.kill(0,pid)
rescue TypeError, ArgumentError
  raise 'pid required'
rescue Errno::ESRCH
  raise 'invalid pid'
rescue Errno::EPERM
  raise 'could not signal process (run as root)'
end

funcs = [ARGV[1] || 'sleep']
if ARGV.size > 2
  funcs += ARGV[2..-1]
end

qi = MsgQ.msgget(pid, 0666)
qo = MsgQ.msgget(-pid, 0666)

if qi == -1 || qo == -1
  raise 'invalid pid'
else
  begin
    if funcs.first == 'watch'
      EventMsg.send_cmd(qo, funcs.join(','))
      Process.kill 'URG', pid
    else
      funcs.each do |func|
        func.strip!
        if func =~ /^(.+)\((.+?)\)$/
          func, args = $1, $2
          args = args.split(',').map{ |a| a.strip }
        end

        EventMsg.send_cmd(qo, "add,#{func}")
        Process.kill 'URG', pid

        if args and args.any?
          args.each do |arg|
            EventMsg.send_cmd(qo, "addexpr,#{arg}")
            Process.kill 'URG', pid
          end
        end
      end
    end

    while true
      # block until a message arrives
      lines = [EventMsg.recv_cmd(qi)]

      # check to see if there are more messages and pull them off
      # so the queue doesn't fill up in kernel land
      25.times do
        break unless line = EventMsg.recv_cmd(qi, false)
        lines << line
      end

      lines.each do |line|
        RBTracer.process_line(line)
      end
    end
  ensure
    EventMsg.send_cmd(qo, funcs.first == 'watch' ? 'unwatch' : 'delall')
    Process.kill 'URG', pid
  end
end
